<?php

class Encrypt_Password {
	public $var = '';

	/**
	 * This function encapsulates the salt generation and password encryption functions.
	 * @param  string $password This is the password the user requested.
	 * @return string           This is the encrypted version of the users requested password.
	 */
	public static function gen_pass($password)	{
		$salt = Encrypt_Password::bfSalt();
		$pwencrypted = Encrypt_Password::bfEnc($password, $salt);
		$pw_array = array('salt' => $salt, 'pwencrypted' => $pwencrypted);
		return $pw_array;
	}

	public static function unEnc($password, $salt)	{
		$pwencrypted = Encrypt_Password::bfEnc($password, $salt);
		$pw_array = array('salt' => $salt, 'pwencrypted' => $pwencrypted);
		return $pw_array;
	}

	/**
	 * Creates a random character string for the salt.
	 * @return string 	returns a random string of characters.
	 */
	public static function bfSalt()	{
	    $chars='./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	    $salt=sprintf('$2a$%02d$', 10);
	    for($i=0; $i<22; $i++)	{
	    	$salt.=$chars[rand(0,63)];	
	    }
	return $salt;
	}

	/**
	 * Encrypts the clear text password the user chose with the salt from bfSalt().
	 * @param  string $ctpw Clear text password that the user wants.
	 * @param  string $salt Salt that was generated by bfSalt().
	 * @return string       This is the encrypted password that gets stored in acl_login.
	 */
	public static function bfEnc($ctpw, $salt)	{

	return crypt($ctpw, $salt);
	}

}

?>
